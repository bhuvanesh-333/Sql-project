-- 1.	What is the total revenue generated from all rentals in the database?
select * from payment;
select sum(amount) as total_revenue from payment;

-- 2.	How many rentals were made in each month_name? 
select monthname(rental_date) as month_name,count(*) as total_rentals from rental
group by month(rental_date), monthname(rental_date)
order by month(rental_date);

-- 3.	What is the rental rate of the film with the longest title in the database? 
select title,length(title) as title_length,rental_rate from film
order by length(title) desc limit 1;

-- 4.	What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")? 
select avg(f.rental_rate) as avg_rental_rate from rental r
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id
where r.rental_date between date_sub('2005-05-05 22:04:30', interval 30 day) and '2005-05-05 22:04:30';

-- 5.	What is the most popular category of films in terms of the number of rentals? 
select c.name as category_name,count(*) as total_rentals from rental r
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id
join film_category fc on f.film_id = fc.film_id
join category c on fc.category_id = c.category_id
group by c.name
order by total_rentals desc
limit 1;

-- 6.	Find the longest movie duration from the list of films that have not been rented by any customer. 
select f.title,f.length as duration from film f
left join inventory i on f.film_id = i.film_id
left join rental r on i.inventory_id = r.inventory_id
where r.rental_id is null
order by f.length desc
limit 1;

-- 7.	What is the average rental rate for films, broken down by category?
select c.name as category_name,avg(f.rental_rate) as avg_rental_rate
from film f
join film_category fc on f.film_id = fc.film_id
join category c on fc.category_id = c.category_id
group by c.name
order by avg_rental_rate desc;

-- 8.	What is the total revenue generated from rentals for each actor in the database? 
 select a.actor_id,concat(a.first_name, ' ', a.last_name) as actor_name,sum(p.amount) as total_revenue
from actor a
join film_actor fa on a.actor_id = fa.actor_id
join film f on fa.film_id = f.film_id
join inventory i on f.film_id = i.film_id
join rental r on i.inventory_id = r.inventory_id
join payment p on r.rental_id = p.rental_id
group by a.actor_id, actor_name
order by total_revenue desc;

-- 9.	Show all the actresses who worked in a film having a "Wrestler" in the description. 
select  distinct a.first_name, a.last_name
from actor a
join film_actor fa on a.actor_id = fa.actor_id
join film f on fa.film_id = f.film_id
where f.description like '%wrestler%';

-- 10.	Which customers have rented the same film more than once? 
select c.customer_id,concat(c.first_name, ' ', c.last_name) as customer_name,f.title,count(*) as times_rented
from customer c
join rental r on c.customer_id = r.customer_id
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id
group by c.customer_id, f.film_id
having count(*) > 1
order by times_rented desc;

-- 11.	How many films in the comedy category have a rental rate higher than the average rental rate?
select count(*) as comedy_films_above_avg
from film f
join film_category fc on f.film_id = fc.film_id
join category c on fc.category_id = c.category_id
where c.name = 'Comedy'and f.rental_rate > (select avg(rental_rate) from film);

-- 12.	Which films have been rented the most by customers living in each city? 
select ci.city,f.title,count(*) as rental_count from city ci
join address a on ci.city_id = a.city_id
join customer c on a.address_id = c.address_id
join rental r on c.customer_id = r.customer_id
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id
group by ci.city, f.title
having count(*) = (select max(cnt) from (select count(*) as cnt from city ci2
        join address a2 on ci2.city_id = a2.city_id
        join customer c2 on a2.address_id = c2.address_id
        join rental r2 on c2.customer_id = r2.customer_id
        join inventory i2 on r2.inventory_id = i2.inventory_id
        join film f2 on i2.film_id = f2.film_id
        where ci2.city = ci.city
        group by f2.title
    ) as film_counts);
    
    -- 13.	What is the total amount spent by customers whose rental payments exceed $200? 
select c.customer_id,concat(c.first_name, ' ', c.last_name) as customer_name,sum(p.amount) as total_spent
from customer c
join payment p on c.customer_id = p.customer_id
group by c.customer_id, customer_name
having sum(p.amount) > 200
order by total_spent desc;

/*14.	Create a View for the total revenue generated by each staff member, 
broken down by store city with the country name.*/ 
create view staff_store_revenue as select 
    s.staff_id,
    concat(s.first_name, ' ', s.last_name) as staff_name,
    ci.city,
    co.country,
    sum(p.amount) as total_revenue
from staff s
join store st on s.store_id = st.store_id
join address a on st.address_id = a.address_id
join city ci on a.city_id = ci.city_id
join country co on ci.country_id = co.country_id
join payment p on s.staff_id = p.staff_id
group by s.staff_id, staff_name, ci.city, co.country;

/*15.	Create a view based on rental information consisting of visiting_day, customer_name, the title of the film, 
 no_of_rental_days, the amount paid by the customer along with the percentage of customer spending. */
 create view rental_info as
select 
    date(r.rental_date) as visiting_day,
    concat(c.first_name, ' ', c.last_name) as customer_name,
    f.title as film_title,
    datediff(r.return_date, r.rental_date) as no_of_rental_days,
    p.amount as amount_paid,
    round((p.amount / (select sum(p2.amount) 
                       from payment p2 
                       where p2.customer_id = c.customer_id) * 100), 2) 
           as percentage_of_customer_spending
from rental r
join customer c on r.customer_id = c.customer_id
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id
join payment p on r.rental_id = p.rental_id;

